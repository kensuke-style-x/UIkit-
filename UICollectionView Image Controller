import UIKit

class ViewController: UIViewController,UICollectionViewDelegate,UICollectionViewDataSource,UICollectionViewDelegateFlowLayout{
    
    var images: [UIImage] = [
        UIImage(named: "Image"),
        UIImage(named: "Image"),
        UIImage(named: "Image"),
        UIImage(named: "Image")
    ].compactMap({$0})
    

    @IBOutlet weak var collectionView: UICollectionView!
    
    
    //trash box
    @IBOutlet weak var deleteItems: UIBarButtonItem!
    //delete Action
    @IBAction func deleteAction(_ sender: UIBarButtonItem) {
        
        if let selectedCell = collectionView.indexPathsForSelectedItems {
            
            let items = selectedCell.map{$0.item}.sorted().reversed()
            
            for item in items {
                images.remove(at: item)
            }
            
            collectionView.deleteItems(at: selectedCell)
            deleteItems.isEnabled = false
        }
    }
    
    
    override func viewDidLoad() {
        super.viewDidLoad()
        
        collectionView.delegate = self
        collectionView.dataSource = self
        
        collectionView.register(CollectionViewCell.nib(), forCellWithReuseIdentifier: "CollectionViewCell")
        
        let layout = UICollectionViewFlowLayout()
        layout.itemSize = CGSize(width: 90, height: 160)
        collectionView.collectionViewLayout = layout
        
        //gesture
        let gesture = UILongPressGestureRecognizer(target: self, action: #selector(handleLongPressGesture(_:)))
        
        collectionView.addGestureRecognizer(gesture)
        
        //edit

        navigationItem.leftBarButtonItem = editButtonItem
        
    }
    

     //gesture delegate
    @objc func handleLongPressGesture(_ gesture: UILongPressGestureRecognizer){
        guard let collectionView = collectionView else {
            return
        }
        switch gesture.state {
        case.began:
            guard let targetIndexPath = collectionView.indexPathForItem(at: gesture.location(in: collectionView)) else {
                return
            }
            collectionView.beginInteractiveMovementForItem(at: targetIndexPath)
            
        case.changed:
            collectionView.updateInteractiveMovementTargetPosition(gesture.location(in: collectionView))
        case.ended:
            collectionView.endInteractiveMovement()
        default:
            collectionView.cancelInteractiveMovement()
        }
        
        
    }


    func collectionView(_ collectionView: UICollectionView, numberOfItemsInSection section: Int) -> Int {
        return images.count
    }
    
    
    func collectionView(_ collectionView: UICollectionView, didSelectItemAt indexPath: IndexPath) {
        collectionView.deselectItem(at: indexPath, animated: true)
        
    }
    
    
    func collectionView(_ collectionView: UICollectionView, cellForItemAt indexPath: IndexPath) -> UICollectionViewCell {
        let cell = collectionView.dequeueReusableCell(withReuseIdentifier: "CollectionViewCell", for: indexPath) as! CollectionViewCell
        
        cell.configure(with: UIImage(named: "Image")!)
        //Edit//
        cell.isEditingMode = isEditing
        
        return cell
    }
    
    // Re-Order Method
    func collectionView(_ collectionView: UICollectionView, canMoveItemAt indexPath: IndexPath) -> Bool {
        return true
    }
    
    func collectionView(_ collectionView: UICollectionView, moveItemAt sourceIndexPath: IndexPath, to destinationIndexPath: IndexPath) {
        let item = images.remove(at: sourceIndexPath.row)
        images.insert(item, at: destinationIndexPath.row)
    }
    
    //Edit Method
    
     //Edit
    override func setEditing(_ editing: Bool, animated: Bool) {
        super.setEditing(editing, animated: animated)
        collectionView.allowsMultipleSelection = editing
        collectionView.indexPathsForSelectedItems?.forEach({(indexPath) in
    
            collectionView.deselectItem(at: indexPath, animated: false)
        
                })
        collectionView.indexPathsForVisibleItems.forEach({(indexPath) in
            
            let cell = collectionView.cellForItem(at: indexPath)as!CollectionViewCell
            
            cell.isEditingMode = editing
            
                })
        }
    
    func collectionView(_ collectionView: UICollectionView, didSelectItemAt indexPath: IndexPath) {
       
        if  !isEditing{
            deleteItems.isEnabled = false
        } else {
            deleteItems.isEnabled = true
        }
        
        }
    //Highlight
    func collectionView(_ collectionView: UICollectionView, didHighlightItemAt indexPath: IndexPath) {
        
        if isEditing{
            if let cell = collectionView.cellForItem(at: indexPath) {
            cell.contentView.backgroundColor = #colorLiteral(red: 0.2549019754, green: 0.2745098174, blue: 0.3019607961, alpha: 1)
            }
        }
    }
    
    func collectionView(_ collectionView: UICollectionView, didUnhighlightItemAt indexPath: IndexPath) {
        
        if !isEditing{
            if let cell = collectionView.cellForItem(at: indexPath) {
            cell.contentView.backgroundColor = nil
            }
        }
    }
    
    func collectionView(_ collectionView: UICollectionView, didDeselectItemAt indexPath: IndexPath) {
        if let cell = collectionView.cellForItem(at: indexPath) as? CollectionViewCell {
            cell.contentView.backgroundColor = nil
        }
    }
    
    
}
